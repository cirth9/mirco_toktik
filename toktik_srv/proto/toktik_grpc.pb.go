// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: toktik.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokTikClient is the client API for TokTik service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokTikClient interface {
	// feed api
	VideoFeed(ctx context.Context, in *VideoFeedRequest, opts ...grpc.CallOption) (*VideoFeedResponse, error)
	// user api
	GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	UserRegister(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserBasicResponse, error)
	UserLogin(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserBasicResponse, error)
	CreateUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserBasicResponse, error)
	// publish api
	PublishAction(ctx context.Context, in *UserPublishRequest, opts ...grpc.CallOption) (*UserBasicResponse, error)
	UserPublishList(ctx context.Context, in *UserPublishListRequest, opts ...grpc.CallOption) (*UserPublishListResponse, error)
	// favorite api
	UserFavoriteAction(ctx context.Context, in *UserFavoriteRequest, opts ...grpc.CallOption) (*UserBasicResponse, error)
	UserFavoriteList(ctx context.Context, in *UserFavoriteListRequest, opts ...grpc.CallOption) (*UserFavoriteListResponse, error)
	// comment api
	UserCommentAction(ctx context.Context, in *UserCommentRequest, opts ...grpc.CallOption) (*UserCommentResponse, error)
	UserCommentList(ctx context.Context, in *UserCommentListRequest, opts ...grpc.CallOption) (*UserCommentListResponse, error)
	// relation api
	UserRelationAction(ctx context.Context, in *UserRelationRequest, opts ...grpc.CallOption) (*UserBasicResponse, error)
	UserRelationFollowList(ctx context.Context, in *UserRelationFollowListRequest, opts ...grpc.CallOption) (*UserRelationListResponse, error)
	UserRelationFollowerList(ctx context.Context, in *UserRelationFollowerListRequest, opts ...grpc.CallOption) (*UserRelationListResponse, error)
}

type tokTikClient struct {
	cc grpc.ClientConnInterface
}

func NewTokTikClient(cc grpc.ClientConnInterface) TokTikClient {
	return &tokTikClient{cc}
}

func (c *tokTikClient) VideoFeed(ctx context.Context, in *VideoFeedRequest, opts ...grpc.CallOption) (*VideoFeedResponse, error) {
	out := new(VideoFeedResponse)
	err := c.cc.Invoke(ctx, "/TokTik/VideoFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokTikClient) GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, "/TokTik/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokTikClient) UserRegister(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserBasicResponse, error) {
	out := new(UserBasicResponse)
	err := c.cc.Invoke(ctx, "/TokTik/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokTikClient) UserLogin(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserBasicResponse, error) {
	out := new(UserBasicResponse)
	err := c.cc.Invoke(ctx, "/TokTik/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokTikClient) CreateUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserBasicResponse, error) {
	out := new(UserBasicResponse)
	err := c.cc.Invoke(ctx, "/TokTik/CreateUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokTikClient) PublishAction(ctx context.Context, in *UserPublishRequest, opts ...grpc.CallOption) (*UserBasicResponse, error) {
	out := new(UserBasicResponse)
	err := c.cc.Invoke(ctx, "/TokTik/PublishAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokTikClient) UserPublishList(ctx context.Context, in *UserPublishListRequest, opts ...grpc.CallOption) (*UserPublishListResponse, error) {
	out := new(UserPublishListResponse)
	err := c.cc.Invoke(ctx, "/TokTik/UserPublishList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokTikClient) UserFavoriteAction(ctx context.Context, in *UserFavoriteRequest, opts ...grpc.CallOption) (*UserBasicResponse, error) {
	out := new(UserBasicResponse)
	err := c.cc.Invoke(ctx, "/TokTik/UserFavoriteAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokTikClient) UserFavoriteList(ctx context.Context, in *UserFavoriteListRequest, opts ...grpc.CallOption) (*UserFavoriteListResponse, error) {
	out := new(UserFavoriteListResponse)
	err := c.cc.Invoke(ctx, "/TokTik/UserFavoriteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokTikClient) UserCommentAction(ctx context.Context, in *UserCommentRequest, opts ...grpc.CallOption) (*UserCommentResponse, error) {
	out := new(UserCommentResponse)
	err := c.cc.Invoke(ctx, "/TokTik/UserCommentAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokTikClient) UserCommentList(ctx context.Context, in *UserCommentListRequest, opts ...grpc.CallOption) (*UserCommentListResponse, error) {
	out := new(UserCommentListResponse)
	err := c.cc.Invoke(ctx, "/TokTik/UserCommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokTikClient) UserRelationAction(ctx context.Context, in *UserRelationRequest, opts ...grpc.CallOption) (*UserBasicResponse, error) {
	out := new(UserBasicResponse)
	err := c.cc.Invoke(ctx, "/TokTik/UserRelationAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokTikClient) UserRelationFollowList(ctx context.Context, in *UserRelationFollowListRequest, opts ...grpc.CallOption) (*UserRelationListResponse, error) {
	out := new(UserRelationListResponse)
	err := c.cc.Invoke(ctx, "/TokTik/UserRelationFollowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokTikClient) UserRelationFollowerList(ctx context.Context, in *UserRelationFollowerListRequest, opts ...grpc.CallOption) (*UserRelationListResponse, error) {
	out := new(UserRelationListResponse)
	err := c.cc.Invoke(ctx, "/TokTik/UserRelationFollowerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokTikServer is the server API for TokTik service.
// All implementations must embed UnimplementedTokTikServer
// for forward compatibility
type TokTikServer interface {
	// feed api
	VideoFeed(context.Context, *VideoFeedRequest) (*VideoFeedResponse, error)
	// user api
	GetUserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	UserRegister(context.Context, *UserInfoRequest) (*UserBasicResponse, error)
	UserLogin(context.Context, *UserInfoRequest) (*UserBasicResponse, error)
	CreateUserInfo(context.Context, *UserInfoRequest) (*UserBasicResponse, error)
	// publish api
	PublishAction(context.Context, *UserPublishRequest) (*UserBasicResponse, error)
	UserPublishList(context.Context, *UserPublishListRequest) (*UserPublishListResponse, error)
	// favorite api
	UserFavoriteAction(context.Context, *UserFavoriteRequest) (*UserBasicResponse, error)
	UserFavoriteList(context.Context, *UserFavoriteListRequest) (*UserFavoriteListResponse, error)
	// comment api
	UserCommentAction(context.Context, *UserCommentRequest) (*UserCommentResponse, error)
	UserCommentList(context.Context, *UserCommentListRequest) (*UserCommentListResponse, error)
	// relation api
	UserRelationAction(context.Context, *UserRelationRequest) (*UserBasicResponse, error)
	UserRelationFollowList(context.Context, *UserRelationFollowListRequest) (*UserRelationListResponse, error)
	UserRelationFollowerList(context.Context, *UserRelationFollowerListRequest) (*UserRelationListResponse, error)
	mustEmbedUnimplementedTokTikServer()
}

// UnimplementedTokTikServer must be embedded to have forward compatible implementations.
type UnimplementedTokTikServer struct {
}

func (UnimplementedTokTikServer) VideoFeed(context.Context, *VideoFeedRequest) (*VideoFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoFeed not implemented")
}
func (UnimplementedTokTikServer) GetUserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedTokTikServer) UserRegister(context.Context, *UserInfoRequest) (*UserBasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedTokTikServer) UserLogin(context.Context, *UserInfoRequest) (*UserBasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedTokTikServer) CreateUserInfo(context.Context, *UserInfoRequest) (*UserBasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserInfo not implemented")
}
func (UnimplementedTokTikServer) PublishAction(context.Context, *UserPublishRequest) (*UserBasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishAction not implemented")
}
func (UnimplementedTokTikServer) UserPublishList(context.Context, *UserPublishListRequest) (*UserPublishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPublishList not implemented")
}
func (UnimplementedTokTikServer) UserFavoriteAction(context.Context, *UserFavoriteRequest) (*UserBasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFavoriteAction not implemented")
}
func (UnimplementedTokTikServer) UserFavoriteList(context.Context, *UserFavoriteListRequest) (*UserFavoriteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFavoriteList not implemented")
}
func (UnimplementedTokTikServer) UserCommentAction(context.Context, *UserCommentRequest) (*UserCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCommentAction not implemented")
}
func (UnimplementedTokTikServer) UserCommentList(context.Context, *UserCommentListRequest) (*UserCommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCommentList not implemented")
}
func (UnimplementedTokTikServer) UserRelationAction(context.Context, *UserRelationRequest) (*UserBasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRelationAction not implemented")
}
func (UnimplementedTokTikServer) UserRelationFollowList(context.Context, *UserRelationFollowListRequest) (*UserRelationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRelationFollowList not implemented")
}
func (UnimplementedTokTikServer) UserRelationFollowerList(context.Context, *UserRelationFollowerListRequest) (*UserRelationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRelationFollowerList not implemented")
}
func (UnimplementedTokTikServer) mustEmbedUnimplementedTokTikServer() {}

// UnsafeTokTikServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokTikServer will
// result in compilation errors.
type UnsafeTokTikServer interface {
	mustEmbedUnimplementedTokTikServer()
}

func RegisterTokTikServer(s grpc.ServiceRegistrar, srv TokTikServer) {
	s.RegisterService(&TokTik_ServiceDesc, srv)
}

func _TokTik_VideoFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokTikServer).VideoFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokTik/VideoFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokTikServer).VideoFeed(ctx, req.(*VideoFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokTik_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokTikServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokTik/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokTikServer).GetUserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokTik_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokTikServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokTik/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokTikServer).UserRegister(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokTik_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokTikServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokTik/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokTikServer).UserLogin(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokTik_CreateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokTikServer).CreateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokTik/CreateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokTikServer).CreateUserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokTik_PublishAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokTikServer).PublishAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokTik/PublishAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokTikServer).PublishAction(ctx, req.(*UserPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokTik_UserPublishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPublishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokTikServer).UserPublishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokTik/UserPublishList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokTikServer).UserPublishList(ctx, req.(*UserPublishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokTik_UserFavoriteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokTikServer).UserFavoriteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokTik/UserFavoriteAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokTikServer).UserFavoriteAction(ctx, req.(*UserFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokTik_UserFavoriteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFavoriteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokTikServer).UserFavoriteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokTik/UserFavoriteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokTikServer).UserFavoriteList(ctx, req.(*UserFavoriteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokTik_UserCommentAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokTikServer).UserCommentAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokTik/UserCommentAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokTikServer).UserCommentAction(ctx, req.(*UserCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokTik_UserCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokTikServer).UserCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokTik/UserCommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokTikServer).UserCommentList(ctx, req.(*UserCommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokTik_UserRelationAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokTikServer).UserRelationAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokTik/UserRelationAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokTikServer).UserRelationAction(ctx, req.(*UserRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokTik_UserRelationFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRelationFollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokTikServer).UserRelationFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokTik/UserRelationFollowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokTikServer).UserRelationFollowList(ctx, req.(*UserRelationFollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokTik_UserRelationFollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRelationFollowerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokTikServer).UserRelationFollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokTik/UserRelationFollowerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokTikServer).UserRelationFollowerList(ctx, req.(*UserRelationFollowerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokTik_ServiceDesc is the grpc.ServiceDesc for TokTik service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokTik_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TokTik",
	HandlerType: (*TokTikServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VideoFeed",
			Handler:    _TokTik_VideoFeed_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _TokTik_GetUserInfo_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _TokTik_UserRegister_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _TokTik_UserLogin_Handler,
		},
		{
			MethodName: "CreateUserInfo",
			Handler:    _TokTik_CreateUserInfo_Handler,
		},
		{
			MethodName: "PublishAction",
			Handler:    _TokTik_PublishAction_Handler,
		},
		{
			MethodName: "UserPublishList",
			Handler:    _TokTik_UserPublishList_Handler,
		},
		{
			MethodName: "UserFavoriteAction",
			Handler:    _TokTik_UserFavoriteAction_Handler,
		},
		{
			MethodName: "UserFavoriteList",
			Handler:    _TokTik_UserFavoriteList_Handler,
		},
		{
			MethodName: "UserCommentAction",
			Handler:    _TokTik_UserCommentAction_Handler,
		},
		{
			MethodName: "UserCommentList",
			Handler:    _TokTik_UserCommentList_Handler,
		},
		{
			MethodName: "UserRelationAction",
			Handler:    _TokTik_UserRelationAction_Handler,
		},
		{
			MethodName: "UserRelationFollowList",
			Handler:    _TokTik_UserRelationFollowList_Handler,
		},
		{
			MethodName: "UserRelationFollowerList",
			Handler:    _TokTik_UserRelationFollowerList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "toktik.proto",
}
